//! Module containing extension implementations for the types auto-generated by `quicktype` in `types.rs`.
//! The implementations are included here because:
//! 1. `quicktype` does not support these additional traits
//! 2. Manual changes made in `types.rs` will be overwritten by future calls to `make jsonschema`.
#![allow(clippy::derivable_impls)]
use std::collections::HashMap;

use crate::{
    types::{RawValue, Type},
    Method, PipesContextData, PipesMessage, PipesMetadataValue, DAGSTER_PIPES_VERSION,
};

impl Default for PipesContextData {
    fn default() -> Self {
        Self {
            asset_keys: None,
            code_version_by_asset_key: None,
            extras: None,
            job_name: None,
            partition_key: None,
            partition_key_range: None,
            partition_time_window: None,
            provenance_by_asset_key: None,
            retry_number: 0,
            run_id: String::new(),
        }
    }
}

impl PipesMessage {
    pub fn new(method: Method, params: Option<HashMap<&str, Option<serde_json::Value>>>) -> Self {
        Self {
            dagster_pipes_version: DAGSTER_PIPES_VERSION.to_string(),
            method,
            params: params.map(|hashmap| {
                hashmap
                    .into_iter()
                    .map(|(k, v)| (k.to_string(), v))
                    .collect::<HashMap<String, Option<serde_json::Value>>>()
            }),
        }
    }
}

/////////////////////////////////////////////////
///// From<T> traits for PipesMetadataValue /////
/////////////////////////////////////////////////

impl From<i64> for PipesMetadataValue {
    fn from(value: i64) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::Integer(value)),
            pipes_metadata_value_type: Some(Type::Int),
        }
    }
}

impl From<f64> for PipesMetadataValue {
    fn from(value: f64) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::Double(value)),
            pipes_metadata_value_type: Some(Type::Float),
        }
    }
}

impl From<bool> for PipesMetadataValue {
    fn from(value: bool) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::Bool(value)),
            pipes_metadata_value_type: Some(Type::Bool),
        }
    }
}

impl From<String> for PipesMetadataValue {
    fn from(value: String) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::String(value)),
            pipes_metadata_value_type: Some(Type::Text),
        }
    }
}

impl From<HashMap<String, Option<serde_json::Value>>> for PipesMetadataValue {
    fn from(value: HashMap<String, Option<serde_json::Value>>) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::AnythingMap(value)),
            pipes_metadata_value_type: Some(Type::Json),
        }
    }
}

impl From<Vec<Option<serde_json::Value>>> for PipesMetadataValue {
    fn from(value: Vec<Option<serde_json::Value>>) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::AnythingArray(value)),
            pipes_metadata_value_type: Some(Type::Json),
        }
    }
}

impl PipesMetadataValue {
    pub fn new(raw_value: RawValue, pipes_metadata_value_type: Type) -> Self {
        Self {
            raw_value: Some(raw_value),
            pipes_metadata_value_type: Some(pipes_metadata_value_type),
        }
    }

    pub fn from_url(url: String) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::String(url)),
            pipes_metadata_value_type: Some(Type::Url),
        }
    }

    pub fn from_path(path: String) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::String(path)),
            pipes_metadata_value_type: Some(Type::Path),
        }
    }

    pub fn from_notebook(notebook: String) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::String(notebook)),
            pipes_metadata_value_type: Some(Type::Notebook),
        }
    }

    pub fn from_md(md: String) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::String(md)),
            pipes_metadata_value_type: Some(Type::Md),
        }
    }

    pub fn from_timestamp(timestamp: f64) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::Double(timestamp)),
            pipes_metadata_value_type: Some(Type::Timestamp),
        }
    }

    pub fn from_asset(asset: String) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::String(asset)),
            pipes_metadata_value_type: Some(Type::Asset),
        }
    }

    pub fn from_job(job: String) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::String(job)),
            pipes_metadata_value_type: Some(Type::Job),
        }
    }

    pub fn from_dagster_run(dagster_run: String) -> Self {
        PipesMetadataValue {
            raw_value: Some(RawValue::String(dagster_run)),
            pipes_metadata_value_type: Some(Type::DagsterRun),
        }
    }

    pub fn null() -> Self {
        PipesMetadataValue {
            raw_value: None,
            pipes_metadata_value_type: Some(Type::Null),
        }
    }
}
