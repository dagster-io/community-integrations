plugins {
    id 'java'
    id 'pmd'
    id "com.vanniktech.maven.publish" version "0.30.0"
    id 'signing'
}

import com.vanniktech.maven.publish.SonatypeHost

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

mavenPublishing {
    coordinates("io.dagster", "pipes", "1.1.0")
    signAllPublications()

    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

    pom {
        name = 'pipes'
        description = 'A java implementation of the dagster pipes protocol'
        url = 'github.com/dagster-io/community-integrations'
        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        developers {
            developer {
                id = 'dagster-io'
                name = 'Dagster'
            }
        }
        scm {
            url = 'github.com/dagster-io/community-integrations'
            connection = 'scm:git://github.com/dagster-io/community-integrations.git'
            developerConnection = 'scm:git://github.com/dagster-io/community-integrations.git'
        }
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.18.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.18.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.18.0'
    implementation 'info.picocli:picocli:4.7.6'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.6'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    implementation group: 'org.mockito', name: 'mockito-core', version: '4.11.0'
    implementation group: 'software.amazon.awssdk', name: 's3', version: '2.29.17'
}

test {
    useJUnitPlatform()
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } +
            sourceSets.main.output + sourceSets.test.output
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn compileJava, compileTestJava, processTestResources
}

pmd {
    toolVersion = "6.48.0"
    ignoreFailures = true
}

tasks.withType(Pmd) {
    // Exclude specific folders from analysis
    exclude 'types/**'
    ruleSetFiles = files('config/pmd-ruleset.xml')
    ruleSets = [] // Disable default rulesets
}
